<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Eventic Wallet</title>
  <link rel="stylesheet" href="https://unpkg.com/98.css@0.1.21/dist/98.css" />
</head>
<body>
  <div class="window" style="max-width: 460px; margin: 2rem auto;">
    <div class="title-bar">
      <div class="title-bar-text">My Wallet</div>
    </div>
    <div class="window-body">

      <!-- Balance + Daily Claim -->
      <fieldset>
        <legend>Balance</legend>
        <div class="field-row" style="justify-content: space-between; align-items: center;">
          <label for="ticketBalance" style="display:inline-flex; align-items:center; gap:6px;">
            <span aria-hidden="true">üéüÔ∏è</span>
            <output id="ticketBalance">0</output>
            Tickets
          </label>
          <button id="claimBtn" title="Daily claim"><span aria-hidden="true">üéÅ</span> Claim</button>
        </div>
        <p style="margin-top:6px;">Tickets are used to create and boost events, and to charge your ticket for better special‚Äëeffect odds. Tickets are not required for RVSPing to events. You can collect a free 2 or 4 tickets every 24 hours (you get more in the evening).</p>
      </fieldset>

      <!-- Secret code -->
      <fieldset>
        <legend>Secret code</legend>
        <div class="field-row" style="gap:6px; align-items:center; justify-content:center;">
          <input id="secretCode" type="text" placeholder="enter code" style="width: 220px;" />
          <button id="secretBtn">Execute</button>
        </div>
      </fieldset>

      <!-- Add Tickets (Stepper) -->
      <fieldset>
        <legend>Add tickets</legend>
        <div class="field-row" style="align-items:center; gap:6px; justify-content:center;">
          <button id="decBtn" aria-label="Decrease">‚àí</button>
          <input id="addQty" type="number" value="0" min="0" style="width:64px; text-align:center;" aria-label="Tickets to add" />
          <button id="incBtn" aria-label="Increase">+</button>
        </div>
        <div class="status-bar" style="margin-top:8px;">
          <p class="status-bar-field" id="calcHint" style="width:100%; text-align:center;">Total: $0.00</p>
        </div>
      </fieldset>

      <!-- Actions -->
      <menu role="toolbar" style="display:flex; gap:8px; justify-content:space-between; padding:0;">
        <button id="buyCard">üí≥ Stripe</button>
        <button id="buyCrypto">ü™ô Coinbase</button>
      </menu>
    </div>
  </div>

  <script>
    // --- Elements ---
    const balanceEl = document.getElementById('ticketBalance');
    const claimBtn = document.getElementById('claimBtn');
    const addQty = document.getElementById('addQty');
    const incBtn = document.getElementById('incBtn');
    const decBtn = document.getElementById('decBtn');
    const hint = document.getElementById('calcHint');
    const buyCard = document.getElementById('buyCard');
    const buyCrypto = document.getElementById('buyCrypto');
    const secretBtn = document.getElementById('secretBtn');
    const secretCode = document.getElementById('secretCode');

    // --- Pricing (demo) ---
    const PRICE = 0.29; // $ per ticket

    // --- Local state ---
    const store = {
      get(k, d){ try { return JSON.parse(localStorage.getItem(k)) ?? d; } catch { return d; }},
      set(k, v){ localStorage.setItem(k, JSON.stringify(v)); }
    };

    let balance = store.get('evt.balance', 0);
    let lastClaim = store.get('evt.lastClaim', null);

    // --- Helpers ---
    function renderBalance(){ balanceEl.textContent = balance; }
    function q(){ return Math.max(0, Math.floor(Number(addQty.value || 0))); }
    function setQ(v){ addQty.value = String(Math.max(0, Math.floor(v))); updateHint(); updateDecState(); }
    function updateHint(){ hint.textContent = `Total: $${(q()*PRICE).toFixed(2)}`; }
    function updateDecState(){ decBtn.disabled = q() <= 0; }

    function canClaimToday(){
      if (!lastClaim) return true;
      const last = new Date(lastClaim);
      const now = new Date();
      return last.toDateString() !== now.toDateString();
    }
    function renderClaim(){
      const allowed = canClaimToday();
      claimBtn.disabled = !allowed;
      claimBtn.textContent = allowed ? 'üéÅ Claim' : 'üéÅ Claimed';
    }

    // --- Events ---
    secretBtn.addEventListener('click', () => {
      // Placeholder: wire up to backend later
      const code = (secretCode.value || '').trim();
      alert(code ? `Executing: ${code}` : 'No code entered.');
    });
    incBtn.addEventListener('click', () => setQ(q()+2));
    decBtn.addEventListener('click', () => setQ(q()-1));
    addQty.addEventListener('input', () => setQ(addQty.value));
    addQty.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') { e.preventDefault(); setQ(q()+2); }
      if (e.key === 'ArrowDown') { e.preventDefault(); setQ(q()-1); }
    });

    claimBtn.addEventListener('click', () => {
      if (!canClaimToday()) return;
      const drop = 2 + Math.floor(Math.random()*3); // 2..4
      balance += drop;
      lastClaim = new Date().toISOString();
      store.set('evt.balance', balance);
      store.set('evt.lastClaim', lastClaim);
      renderBalance();
      renderClaim();
      alert(`Claimed ${drop} ticket(s)!`);
    });

    function checkout(kind){
      const qty = q();
      if (qty <= 0) return alert('Choose 1 or more tickets.');
      const total = (qty*PRICE).toFixed(2);
      if (kind === 'card') alert(`Card checkout for ${qty} ticket(s) ‚Äî $${total}`);
      else alert(`Crypto checkout for ${qty} ticket(s) ‚Äî ${qty} USDC on Base`);
    }
    buyCard.addEventListener('click', () => checkout('card'));
    buyCrypto.addEventListener('click', () => checkout('crypto'));

    // --- Init ---
    renderBalance();
    renderClaim();
    updateHint();
    updateDecState();
  </script>
</body>
</html>
